<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Double Pendulum Chaos</title>

    <link rel="stylesheet" href="../../common/navbar-enhanced.css">
    <link rel="stylesheet" href="../../common/santa-improvements.css">
    <link rel="stylesheet" href="../../common/global-calculator.css">
</head>
<body>
                <!-- Enhanced Navigation Bar -->
    <nav class="main-nav">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="../../index.html">🧮 Docket One</a>
            </div>
            <div class="nav-search">
                <label for="input-v1tuxlhso" class="sr-only">Input field</label>
            <input type="text" i id="input-v1tuxlhso" aria-label="Calculator input"d="calc-search" placeholder="Search calculators..." class="search-input">
                <div id="search-results" class="search-results"></div>
            </div>
            <ul class="nav-links">
                <li><a href="../BigKidMath/index.html" class="category-main-link">Big Kid Math</a></li>
                <li><a href="../CipherLab/index.html" class="category-main-link">Cipher Lab</a></li>
                <li><a href="../GeekGalaxy/index.html" class="category-main-link">Geek Galaxy</a></li>
                <li><a href="../LifeHacks/index.html" class="category-main-link">Life Hacks</a></li>
                <li><a href="../Math_Magik/index.html" class="category-main-link">Math Magik</a></li>
                <li><a href="../Otaku_Ops/index.html" class="category-main-link">Otaku Ops</a></li>
                <li><a href="../../index.html" class="home-link">Unit Converter</a></li>
            </ul>
            <button class="mobile-menu-btn" a aria-label="Perform action"ria-label="Toggle menu">
                <span></span>
                <span></span>
                <span></span>
            </button>
        </div>
    </nav>
    

    


    <h1>Double Pendulum Chaos</h1>
	<span>This simulation shows how tiny changes can lead to completely unpredictable results—a key idea in chaos theory.
    Two pendulums start almost identically (the red one has a tiny difference in angle).
    At first, they swing similarly, but soon their paths diverge wildly.
    This is called the "butterfly effect"—where small initial changes cause big outcomes over time.
Try it yourself: Adjust the sliders and watch how even a 0.5° difference creates chaos!
(Chaos theory explains why weather forecasts aren’t perfect and why life can be so unpredictable!) 🌪️</span>
    <p>Tiny changes in initial conditions lead to wildly different outcomes!</p>
    
    <div id="controls">
        <div>
            <label for="theta1">Initial Angle 1 (θ₁): <span id="theta1-value">90</span>°</label><br>
            <input type="range" id="theta1" class="slider" min="0" max="180" value="90">
        </div>
        <div>
            <label for="theta2">Initial Angle 2 (θ₂): <span id="theta2-value">90</span>°</label><br>
            <input type="range" id="theta2" class="slider" min="0" max="180" value="90">
        </div>
        <div>
            <label for="perturb">Perturbation (Δθ₂): <span id="perturb-value">0.5</span>°</label><br>
            <input type="range" id="perturb" class="slider" min="0" max="5" value="0.5" step="0.1">
        </div>
        <button aria-label="Perform action" id="reset">Reset Simulation</button>
    </div>
    
    <canvas id="pendulumCanvas" width="800" height="500"></canvas>

    <script>
        // Canvas setup
        const canvas = document.getElementById('pendulumCanvas');
        const ctx = canvas.getContext('2d');
        
        // Pendulum parameters
        let length1 = 100, length2 = 100;
        let mass1 = 20, mass2 = 20;
        let gravity = 0.5;
        
        // Pendulum state
        let pendulum1 = { theta1: Math.PI/2, theta2: Math.PI/2, omega1: 0, omega2: 0, trail: [] };
        let pendulum2 = { theta1: Math.PI/2, theta2: Math.PI/2 + 0.0087, omega1: 0, omega2: 0, trail: [] }; // +0.5° perturbation
        
        // Animation loop
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.save();
            ctx.translate(canvas.width / 2, canvas.height / 3);
            
            // Update and draw both pendulums
            updatePendulum(pendulum1);
            updatePendulum(pendulum2);
            
            drawPendulum(pendulum1, 'blue');
            drawPendulum(pendulum2, 'red');
            
            ctx.restore();
            requestAnimationFrame(animate);
        }
        
        // Physics update
        function updatePendulum(p) {
            const delta = p.theta2 - p.theta1;
            const den1 = (2 * mass1 + mass2 - mass2 * Math.cos(2 * delta));
            const den2 = (length2 / length1) * den1;
            
            // Angular accelerations
            const alpha1 = (
                gravity * mass2 * Math.sin(p.theta2) * Math.cos(delta) -
                gravity * (mass1 + mass2) * Math.sin(p.theta1) -
                mass2 * Math.sin(delta) * (length2 * p.omega2 * p.omega2 +
                length1 * p.omega1 * p.omega1 * Math.cos(delta))
            ) / (length1 * den1);
            
            const alpha2 = (
                gravity * (mass1 + mass2) * Math.sin(p.theta1) * Math.cos(delta) +
                gravity * mass1 * Math.sin(p.theta2) +
                Math.sin(delta) * (length1 * (mass1 + mass2) * p.omega1 * p.omega1 +
                length2 * mass2 * p.omega2 * p.omega2 * Math.cos(delta))
            ) / (length2 * den2);
            
            p.omega1 += alpha1;
            p.omega2 += alpha2;
            p.theta1 += p.omega1;
            p.theta2 += p.omega2;
            
            // Store trail (second bob only)
            const x = length1 * Math.sin(p.theta1) + length2 * Math.sin(p.theta2);
            const y = length1 * Math.cos(p.theta1) + length2 * Math.cos(p.theta2);
            p.trail.push({x, y});
            if (p.trail.length > 500) p.trail.shift();
        }
        
        // Draw pendulum and trail
        function drawPendulum(p, color) {
            const x1 = length1 * Math.sin(p.theta1);
            const y1 = length1 * Math.cos(p.theta1);
            const x2 = x1 + length2 * Math.sin(p.theta2);
            const y2 = y1 + length2 * Math.cos(p.theta2);
            
            // Draw trail
            ctx.beginPath();
            ctx.strokeStyle = color + '80'; // Semi-transparent
            ctx.lineWidth = 1;
            for (let i = 0; i < p.trail.length; i++) {
                ctx.lineTo(p.trail[i].x, p.trail[i].y);
            }
            ctx.stroke();
            
            // Draw rods
            ctx.beginPath();
            ctx.strokeStyle = 'black';
            ctx.lineWidth = 2;
            ctx.moveTo(0, 0);
            ctx.lineTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
            
            // Draw bobs
            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.arc(x1, y1, mass1 / 2, 0, Math.PI * 2);
            ctx.arc(x2, y2, mass2 / 2, 0, Math.PI * 2);
            ctx.fill();
        }
        
        // Reset simulation with new angles
        function resetSimulation() {
            const theta1 = parseFloat(document.getElementById('theta1').value) * Math.PI / 180;
            const theta2 = parseFloat(document.getElementById('theta2').value) * Math.PI / 180;
            const perturb = parseFloat(document.getElementById('perturb').value) * Math.PI / 180;
            
            pendulum1 = { theta1, theta2, omega1: 0, omega2: 0, trail: [] };
            pendulum2 = { theta1, theta2: theta2 + perturb, omega1: 0, omega2: 0, trail: [] };
        }
        
        // Event listeners
        document.getElementById('theta1').addEventListener('input', (e) => {
            document.getElementById('theta1-value').textContent = e.target.value;
        });
        document.getElementById('theta2').addEventListener('input', (e) => {
            document.getElementById('theta2-value').textContent = e.target.value;
        });
        document.getElementById('perturb').addEventListener('input', (e) => {
            document.getElementById('perturb-value').textContent = e.target.value;
        });
        document.getElementById('reset').addEventListener('click', resetSimulation);
        
        // Start animation
        animate();
    </script>

    <div class="related-calculators" style="margin-top: 2rem; padding: 1rem; background: rgba(0,0,0,0.1); border-radius: 8px;">
        <h3 style="margin-top: 0;">Related Math Magik Tools</h3>
        <a href="./entropy and feigenbaums constant.html" style="display: block; padding: 0.5rem; margin: 0.25rem 0; background: rgba(255,255,255,0.1); border-radius: 4px; text-decoration: none; color: inherit;">entropy and feigenbaums constant</a><a href="./FIRE Number Calculator.html" style="display: block; padding: 0.5rem; margin: 0.25rem 0; background: rgba(255,255,255,0.1); border-radius: 4px; text-decoration: none; color: inherit;">FIRE Number Calculator</a><a href="./Inflation Impact Calculator.html" style="display: block; padding: 0.5rem; margin: 0.25rem 0; background: rgba(255,255,255,0.1); border-radius: 4px; text-decoration: none; color: inherit;">Inflation Impact Calculator</a>
        <a href="./index.html" style="display: block; padding: 0.5rem; margin-top: 1rem; background: rgba(74,144,226,0.2); border-radius: 4px; text-decoration: none; color: inherit; font-weight: bold;">← Back to Math Magik Hub</a>
    </div>

        <script>
        // 🎅 Santa Claude's Interactive Enhancements
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🎅 Santa Claude's enhancements loaded!');
            
            // Enhanced button interactions
            const buttons = document.querySelectorAll('button, .btn');
            buttons.forEach(btn => {
                btn.addEventListener('click', function() {
                    this.classList.add('loading');
                    setTimeout(() => {
                        this.classList.remove('loading');
                    }, 500);
                });
            });
            
            // Enhanced results display
            const resultElements = document.querySelectorAll('.result, .results, .output, #result, #output');
            resultElements.forEach(el => {
                const observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                        if (mutation.type === 'childList' || mutation.type === 'characterData') {
                            el.classList.add('show');
                        }
                    });
                });
                observer.observe(el, { childList: true, subtree: true, characterData: true });
            });
            
            // Form validation enhancements
            const inputs = document.querySelectorAll('input[type="number"], input[type="text"]');
            inputs.forEach(input => {
                input.addEventListener('input', function() {
                    if (this.checkValidity()) {
                        this.classList.remove('input-error');
                        this.classList.add('input-success');
                    } else {
                        this.classList.remove('input-success');
                        this.classList.add('input-error');
                    }
                });
            });
        });
        </script>
</body>
</html>